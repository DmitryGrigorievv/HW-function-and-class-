// Представьте, что у вас есть класс для управления библиотекой.
// В этом классе будет приватное свойство для хранения списка книг, а также методы для добавления книги,
// удаления книги и получения информации о наличии книги.
// Класс должен содержать приватное свойство #books, которое инициализируется пустым массивом и представляет
// собой список книг в библиотеке.
// Реализуйте геттер allBooks, который возвращает текущий список книг.
// Реализуйте метод addBook(title), который позволяет добавлять книгу в список. Если книга с таким названием
// уже существует в списке, выбросьте ошибку с соответствующим сообщением.
// Реализуйте метод removeBook(title), который позволит удалять книгу из списка по названию. Если книги
// с таким названием нет в списке, выбросьте ошибку с соответствующим сообщением.
// Реализуйте метод hasBook(title), который будет проверять наличие книги в библиотеке и возвращать true или
//  false в зависимости от того, есть ли такая книга в списке или нет.
// Реализуйте конструктор, который принимает начальный список книг (массив) в качестве аргумента. Убедитесь, что
// предоставленный массив не содержит дубликатов; в противном случае выбрасывайте ошибку.
class Library {
  #books = [];

  // Конструктор, инициализирующий начальный список книг
  constructor(initialBooks = []) {
    // Проверяем, есть ли дубликаты в начальном списке книг
    const bookSet = new Set(initialBooks);
    if (bookSet.size !== initialBooks.length) {
      throw new Error("Начальный список книг содержит дубликаты");
    }
    this.#books = initialBooks;
  }

  // Геттер для получения текущего списка книг
  get allBooks() {
    return [...this.#books]; // Возвращаем копию массива книг
  }

  // Метод для добавления книги в список
  addBook(title) {
    if (this.#books.includes(title)) {
      throw new Error(`Книга '${title}' уже существует в списке`);
    }
    this.#books.push(title);
  }

  // Метод для удаления книги из списка по названию
  removeBook(title) {
    const bookIndex = this.#books.indexOf(title);
    if (bookIndex === -1) {
      throw new Error(`Книга '${title}' отсутствует в списке`);
    }
    this.#books.splice(bookIndex, 1);
  }

  // Метод для проверки наличия книги в библиотеке
  hasBook(title) {
    return this.#books.includes(title);
  }
}

// Пример использования класса Library
try {
  const library = new Library(["Гарри Поттер", "Властелин колец"]); // Инициализируем библиотеку с двумя книгами

  console.log(library.allBooks); // Вывод: [ 'Гарри Поттер', 'Властелин колец' ]

  library.addBook("1984");
  console.log(library.allBooks); // Вывод: [ 'Гарри Поттер', 'Властелин колец', '1984' ]

  console.log(library.hasBook("1984")); // Вывод: true

  library.removeBook("Властелин колец");
  console.log(library.allBooks); // Вывод: [ 'Гарри Поттер', '1984' ]

  console.log(library.hasBook("Властелин колец")); // Вывод: false

  // Пример ошибок
  // library.addBook('1984'); // Выбрасывает ошибку: Книга '1984' уже существует в списке

  // library.removeBook('Неизвестная книга'); // Выбрасывает ошибку: Книга 'Неизвестная книга' отсутствует в списке
} catch (error) {
  console.error(error.message);
}
